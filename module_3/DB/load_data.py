import psycopg
from psycopg import OperationalError
from pathlib import Path
from connection import get_db_connection
import json

class DataLoader:
    def __init__(self, json_path):
        # Create a connection to the PostgreSQL database
        self.connection = get_db_connection()

        self.json_path  = json_path
    
    def load_data(self, filename='applicant_data.json'):
        """Load parsed data from a JSON file."""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading data: {e}")
            return None

    def create_table(self):
        """Create the applicants table in the database if it does not exist."""
        # Enable autocommit to ensure changes are saved
        self.connection.autocommit = True

        try:
            # Open cursor to perform database operations
            with self.connection.cursor() as cur:
                # Execute table creation
                cur.execute("""
                            CREATE TABLE IF NOT EXISTS applicants (
                                id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                program TEXT,
                                comments TEXT,
                                date_added DATE,
                                url TEXT,
                                status TEXT,
                                term TEXT,
                                us_or_international TEXT,
                                gpa FLOAT,
                                gre FLOAT,
                                gre_v FLOAT,
                                gre_aw FLOAT,
                                degree TEXT
                            );
                            """)
                
                # Commit changes
                self.connection.commit()

        except psycopg.OperationalError as e:
            # Print error if something goes wrong with table creation
            print(f"The error '{e}' occurred")
    
    def insert_to_table(self, data):
        """Insert a list of applicant dictionaries into the database table."""
        insert_query = """
                        INSERT INTO applicants (
                        program, comments, date_added, url, status, term,
                        us_or_international, gpa, gre, gre_v, gre_aw, degree
                        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        """
        
        # Get data from dictionary
        try:
            with self.connection.cursor() as cur:
                # Iterate over each record and insert into the table
                for row in data:
                    values = (
                            row.get("program"),
                            row.get("comment"),
                            row.get("date_added"),
                            row.get("url"),
                            row.get("status"),
                            row.get("term"),
                            row.get("us_or_international"),
                            row.get("GPA"),
                            row.get("GRE"),
                            row.get("GRE_V"),
                            row.get("GRE_AW"),
                            row.get("degree")
                        )

                    cur.execute(insert_query, values)

            # Enable autocommit to ensure changes are saved
            self.connection.autocommit = True 

        except psycopg.OperationalError as e:
            # Print error if insertion fails
            print(f"The error '{e}' occurred")
        
        # Close connection
        self.connection.close()

# Main execution block
if __name__ == "__main__":
    # Define the PostgreSQL connection configuration
    db_config = {
        "host":     "localhost",
        "dbname":   "gradCafe",
        "user":     "postgres",
        "password": "N@t@!ush2395P@sah!tz@",
        "port":     5432
    }
    
    # Full path to the JSON data file
    json_path = Path(__file__).parent.parent / 'module_2' / 'applicant_data.json'

    # Instantiate the DataLoader class
    loader = DataLoader(db_config, json_path)

    # Create the applicants table in the database
    loader.create_table()

    # Load applicant data from the JSON file
    applicants_info = loader.load_data(json_path)

    # Insert the loaded data into the database table
    loader.insert_to_table(applicants_info)